apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-leader-elector-sa

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-leader-elector-cr
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-leader-elector-rb
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-leader-elector-sa
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-leader-elector-cr
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-schema-registry
  labels:
    app: {{ .Release.Name }}-schema-registry
spec:
  serviceName: {{ .Release.Name }}-schema-registry
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-schema-registry
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-schema-registry
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '51805'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: cdl-schema-registry
        image: "{{ .Values.global.imageRepositoryPath }}{{ .Values.schemaRegistry.image }}:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/{{ .Values.schemaRegistry.bin }}"]
        env:
        - name: INPUT_PORT
          value: "6400"
        - name: DB_NAME
          value: "/data/db/registry_db"
        - name: REPLICATION_ROLE
          value: "slave"
        - name: KAFKA_BROKERS
          value: "{{ .Values.global.kafkaBrokers }}"
        - name: KAFKA_GROUP_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_TOPICS
          value: "{{ .Release.Name | upper }}_SCHEMA_SYNCHRO"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: RUST_LOG
          value: "info,{{ .Values.schemaRegistry.bin }}=debug"
        ports:
        - containerPort: 51805
        volumeMounts:
        - mountPath: "/data/db"
          name: {{ .Release.Name }}-pv-schema-registry
        readinessProbe:
          httpGet:
            path: /status/readiness
            port: 3000
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          httpGet:
            path: /status/health
            port: 3000
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /status/startup
            port: 3000
          failureThreshold: 6
          periodSeconds: 5
      imagePullSecrets:
      - name: {{ .Values.global.cdlImagePullSecrets }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-pv-schema-registry
    spec:
      storageClassName: {{ .Values.schemaRegistry.storageClass }}
      resources:
        requests:
          storage: {{ .Values.schemaRegistry.storageSize }}
      accessModes:
      - ReadWriteOnce

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-data-router
  labels:
    app: {{ .Release.Name }}-data-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-data-router
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-data-router
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '51805'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: cdl-data-router
        image: "{{ .Values.global.imageRepositoryPath }}{{ .Values.dataRouter.image }}:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/{{ .Values.dataRouter.bin }}"]
        env:
        - name: INPUT_ADDR
          value: {{ .Values.global.rabbitMqConnectionString }}
        - name: INPUT_QUEUE
          value: {{ .Values.dataRouter.inputQueue }}
        - name: KAFKA_BROKERS
          value: "{{ .Values.global.kafkaBrokers }}"
        - name: KAFKA_GROUP_ID
          value: "data-router"
        - name: KAFKA_ERROR_CHANNEL
          value: {{ .Values.global.reportTopic }}
        - name: SCHEMA_REGISTRY_ADDR
          value: "http://{{ .Release.Name }}-schema-registry:6400"
        - name: CACHE_CAPACITY
          value: "500"
        - name: RUST_LOG
          value: "info,{{ .Values.dataRouter.bin }}=debug"
        ports:
        - containerPort: 51805
      imagePullSecrets:
        - name: {{ .Values.global.cdlImagePullSecrets }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-leader-elector
  labels:
    app: {{ .Release.Name }}-leader-elector
spec:
  replicas: 1 # do not scale
  selector:
    matchLabels:
      app: {{ .Release.Name }}-leader-elector
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-leader-elector
    spec:
      serviceAccountName: {{ .Release.Name }}-leader-elector-sa
      containers:
      - name: cdl-leader-elector
        image: "{{ .Values.global.imageRepositoryPath }}{{ .Values.leaderElector.image }}:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/{{ .Values.leaderElector.bin }}"]
        env:
        - name: HEARTBEAT_SECS
          value: "{{ .Values.leaderElector.heartbeatTime }}"
        - name: SCHEMA_APP_NAME
          value: "{{ .Release.Name }}-schema-registry"
        - name: SCHEMA_ADDR
          value: "http://{{ .Release.Name }}-schema-registry"
        - name: SCHEMA_PORT
          value: "6400"
        - name: RUST_LOG
          value: "info,{{ .Values.leaderElector.bin }}=debug"
      imagePullSecrets:
        - name: {{ .Values.global.cdlImagePullSecrets }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-schema-registry
spec:
  type: ClusterIP
  selector:
    app: {{ .Release.Name }}-schema-registry
  ports:
    - port: 6400
      targetPort: 6400

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-schema-registry-master
spec:
  type: NodePort
  selector:
    app: {{ .Release.Name }}-schema-registry
    role: master
  ports:
    - port: 6400
      targetPort: 6400
      nodePort: {{ .Values.schemaRegistry.port }}
